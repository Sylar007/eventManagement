// <auto-generated />
using System;
using Celebratix.Common.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Celebratix.Migrations
{
    [DbContext(typeof(CelebratixDbContext))]
    [Migration("20230516214612_RenameCheckedInTicketsForConsistency")]
    partial class RenameCheckedInTicketsForConsistency
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar");

                    b.Property<string>("StripeConnectAccountId")
                        .HasColumnType("varchar");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("varchar");

                    b.Property<bool>("StripePayoutRequirementsFulfilled")
                        .HasColumnType("boolean");

                    b.Property<bool>("StripePayoutRequirementsSubmitted")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex")
                        .HasFilter("[NormalizedEmail] IS NOT NULL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("'NormalizedUserName' IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryId")
                        .HasColumnType("varchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DefaultVat")
                        .HasColumnType("decimal(4,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("CallingCode")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ISO3")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = "ZA",
                            CallingCode = "+27",
                            Enabled = false,
                            ISO3 = "ZAF",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = "ET",
                            CallingCode = "+251",
                            Enabled = false,
                            ISO3 = "ETH",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = "AE",
                            CallingCode = "+971",
                            Enabled = false,
                            ISO3 = "ARE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = "BH",
                            CallingCode = "+973",
                            Enabled = false,
                            ISO3 = "BHR",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = "DZ",
                            CallingCode = "+213",
                            Enabled = false,
                            ISO3 = "DZA",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = "EG",
                            CallingCode = "+20",
                            Enabled = false,
                            ISO3 = "EGY",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = "IQ",
                            CallingCode = "+964",
                            Enabled = false,
                            ISO3 = "IRQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = "JO",
                            CallingCode = "+962",
                            Enabled = false,
                            ISO3 = "JOR",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = "KW",
                            CallingCode = "+965",
                            Enabled = false,
                            ISO3 = "KWT",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = "LB",
                            CallingCode = "+961",
                            Enabled = false,
                            ISO3 = "LBN",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = "LY",
                            CallingCode = "+218",
                            Enabled = false,
                            ISO3 = "LBY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = "MA",
                            CallingCode = "+212",
                            Enabled = false,
                            ISO3 = "MAR",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = "OM",
                            CallingCode = "+968",
                            Enabled = false,
                            ISO3 = "OMN",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = "QA",
                            CallingCode = "+974",
                            Enabled = false,
                            ISO3 = "QAT",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = "SA",
                            CallingCode = "+966",
                            Enabled = false,
                            ISO3 = "SAU",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = "SY",
                            CallingCode = "+963",
                            Enabled = false,
                            ISO3 = "SYR",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = "TN",
                            CallingCode = "+216",
                            Enabled = false,
                            ISO3 = "TUN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = "YE",
                            CallingCode = "+967",
                            Enabled = false,
                            ISO3 = "YEM",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = "CL",
                            CallingCode = "+56",
                            Enabled = false,
                            ISO3 = "CHL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = "IN",
                            CallingCode = "+91",
                            Enabled = false,
                            ISO3 = "IND",
                            Name = "India"
                        },
                        new
                        {
                            Id = "AZ",
                            CallingCode = "+994",
                            Enabled = false,
                            ISO3 = "AZE",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = "RU",
                            CallingCode = "+7",
                            Enabled = false,
                            ISO3 = "RUS",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = "BY",
                            CallingCode = "+375",
                            Enabled = false,
                            ISO3 = "BLR",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = "BG",
                            CallingCode = "+359",
                            Enabled = false,
                            ISO3 = "BGR",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = "BD",
                            CallingCode = "+880",
                            Enabled = false,
                            ISO3 = "BGD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = "CN",
                            CallingCode = "+86",
                            Enabled = false,
                            ISO3 = "CHN",
                            Name = "China"
                        },
                        new
                        {
                            Id = "FR",
                            CallingCode = "+33",
                            Enabled = false,
                            ISO3 = "FRA",
                            Name = "France"
                        },
                        new
                        {
                            Id = "BA",
                            CallingCode = "+387",
                            Enabled = false,
                            ISO3 = "BIH",
                            Name = "Bosnia & Herzegovina"
                        },
                        new
                        {
                            Id = "ES",
                            CallingCode = "+34",
                            Enabled = false,
                            ISO3 = "ESP",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = "CZ",
                            CallingCode = "+420",
                            Enabled = false,
                            ISO3 = "CZE",
                            Name = "Czechia"
                        },
                        new
                        {
                            Id = "GB",
                            CallingCode = "+44",
                            Enabled = false,
                            ISO3 = "GBR",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = "DK",
                            CallingCode = "+45",
                            Enabled = false,
                            ISO3 = "DNK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = "AT",
                            CallingCode = "+43",
                            Enabled = false,
                            ISO3 = "AUT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = "CH",
                            CallingCode = "+41",
                            Enabled = false,
                            ISO3 = "CHE",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = "DE",
                            CallingCode = "+49",
                            Enabled = false,
                            ISO3 = "DEU",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = "LI",
                            CallingCode = "+423",
                            Enabled = false,
                            ISO3 = "LIE",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = "LU",
                            CallingCode = "+352",
                            Enabled = false,
                            ISO3 = "LUX",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = "MV",
                            CallingCode = "+960",
                            Enabled = false,
                            ISO3 = "MDV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = "BT",
                            CallingCode = "+975",
                            Enabled = false,
                            ISO3 = "BTN",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = "GR",
                            CallingCode = "+30",
                            Enabled = false,
                            ISO3 = "GRC",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = "AU",
                            CallingCode = "+61",
                            Enabled = false,
                            ISO3 = "AUS",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = "BZ",
                            CallingCode = "+501",
                            Enabled = false,
                            ISO3 = "BLZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = "CA",
                            CallingCode = "+1",
                            Enabled = false,
                            ISO3 = "CAN",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = "HK",
                            CallingCode = "+852",
                            Enabled = false,
                            ISO3 = "HKG",
                            Name = "Hong Kong SAR"
                        },
                        new
                        {
                            Id = "IE",
                            CallingCode = "+353",
                            Enabled = false,
                            ISO3 = "IRL",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = "JM",
                            CallingCode = "+1",
                            Enabled = false,
                            ISO3 = "JAM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = "MY",
                            CallingCode = "+60",
                            Enabled = false,
                            ISO3 = "MYS",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = "NZ",
                            CallingCode = "+64",
                            Enabled = false,
                            ISO3 = "NZL",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = "PH",
                            CallingCode = "+63",
                            Enabled = false,
                            ISO3 = "PHL",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = "SG",
                            CallingCode = "+65",
                            Enabled = false,
                            ISO3 = "SGP",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = "TT",
                            CallingCode = "+1",
                            Enabled = false,
                            ISO3 = "TTO",
                            Name = "Trinidad & Tobago"
                        },
                        new
                        {
                            Id = "US",
                            CallingCode = "+1",
                            Enabled = false,
                            ISO3 = "USA",
                            Name = "United States"
                        },
                        new
                        {
                            Id = "ZW",
                            CallingCode = "+263",
                            Enabled = false,
                            ISO3 = "ZWE",
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            Id = "AR",
                            CallingCode = "+54",
                            Enabled = false,
                            ISO3 = "ARG",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = "BO",
                            CallingCode = "+591",
                            Enabled = false,
                            ISO3 = "BOL",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = "CO",
                            CallingCode = "+57",
                            Enabled = false,
                            ISO3 = "COL",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = "CR",
                            CallingCode = "+506",
                            Enabled = false,
                            ISO3 = "CRI",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = "CU",
                            CallingCode = "+53",
                            Enabled = false,
                            ISO3 = "CUB",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = "DO",
                            CallingCode = "+1",
                            Enabled = false,
                            ISO3 = "DOM",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = "EC",
                            CallingCode = "+593",
                            Enabled = false,
                            ISO3 = "ECU",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = "GT",
                            CallingCode = "+502",
                            Enabled = false,
                            ISO3 = "GTM",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = "HN",
                            CallingCode = "+504",
                            Enabled = false,
                            ISO3 = "HND",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = "MX",
                            CallingCode = "+52",
                            Enabled = false,
                            ISO3 = "MEX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = "NI",
                            CallingCode = "+505",
                            Enabled = false,
                            ISO3 = "NIC",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = "PA",
                            CallingCode = "+507",
                            Enabled = false,
                            ISO3 = "PAN",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = "PE",
                            CallingCode = "+51",
                            Enabled = false,
                            ISO3 = "PER",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = "PR",
                            CallingCode = "+1",
                            Enabled = false,
                            ISO3 = "PRI",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = "PY",
                            CallingCode = "+595",
                            Enabled = false,
                            ISO3 = "PRY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = "SV",
                            CallingCode = "+503",
                            Enabled = false,
                            ISO3 = "SLV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = "UY",
                            CallingCode = "+598",
                            Enabled = false,
                            ISO3 = "URY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = "VE",
                            CallingCode = "+58",
                            Enabled = false,
                            ISO3 = "VEN",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = "EE",
                            CallingCode = "+372",
                            Enabled = false,
                            ISO3 = "EST",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = "IR",
                            CallingCode = "+98",
                            Enabled = false,
                            ISO3 = "IRN",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = "SN",
                            CallingCode = "+221",
                            Enabled = false,
                            ISO3 = "SEN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = "FI",
                            CallingCode = "+358",
                            Enabled = false,
                            ISO3 = "FIN",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = "FO",
                            CallingCode = "+298",
                            Enabled = false,
                            ISO3 = "FRO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = "BE",
                            CallingCode = "+32",
                            Enabled = false,
                            ISO3 = "BEL",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = "CD",
                            CallingCode = "+243",
                            Enabled = false,
                            ISO3 = "COD",
                            Name = "Congo (DRC)"
                        },
                        new
                        {
                            Id = "CI",
                            CallingCode = "+225",
                            Enabled = false,
                            ISO3 = "CIV",
                            Name = "Côte d’Ivoire"
                        },
                        new
                        {
                            Id = "CM",
                            CallingCode = "+237",
                            Enabled = false,
                            ISO3 = "CMR",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = "HT",
                            CallingCode = "+509",
                            Enabled = false,
                            ISO3 = "HTI",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = "MC",
                            CallingCode = "+377",
                            Enabled = false,
                            ISO3 = "MCO",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = "ML",
                            CallingCode = "+223",
                            Enabled = false,
                            ISO3 = "MLI",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = "RE",
                            CallingCode = "+262",
                            Enabled = false,
                            ISO3 = "REU",
                            Name = "Réunion"
                        },
                        new
                        {
                            Id = "NL",
                            CallingCode = "+31",
                            Enabled = true,
                            ISO3 = "NLD",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = "IL",
                            CallingCode = "+972",
                            Enabled = false,
                            ISO3 = "ISR",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = "HR",
                            CallingCode = "+385",
                            Enabled = false,
                            ISO3 = "HRV",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = "HU",
                            CallingCode = "+36",
                            Enabled = false,
                            ISO3 = "HUN",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = "AM",
                            CallingCode = "+374",
                            Enabled = false,
                            ISO3 = "ARM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = "ID",
                            CallingCode = "+62",
                            Enabled = false,
                            ISO3 = "IDN",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = "NG",
                            CallingCode = "+234",
                            Enabled = false,
                            ISO3 = "NGA",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = "IS",
                            CallingCode = "+354",
                            Enabled = false,
                            ISO3 = "ISL",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = "IT",
                            CallingCode = "+39",
                            Enabled = false,
                            ISO3 = "ITA",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = "JP",
                            CallingCode = "+81",
                            Enabled = false,
                            ISO3 = "JPN",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = "GE",
                            CallingCode = "+995",
                            Enabled = false,
                            ISO3 = "GEO",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = "KZ",
                            CallingCode = "+7",
                            Enabled = false,
                            ISO3 = "KAZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = "GL",
                            CallingCode = "+299",
                            Enabled = false,
                            ISO3 = "GRL",
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = "KH",
                            CallingCode = "+855",
                            Enabled = false,
                            ISO3 = "KHM",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = "KR",
                            CallingCode = "+82",
                            Enabled = false,
                            ISO3 = "KOR",
                            Name = "Korea"
                        },
                        new
                        {
                            Id = "KG",
                            CallingCode = "+996",
                            Enabled = false,
                            ISO3 = "KGZ",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = "LA",
                            CallingCode = "+856",
                            Enabled = false,
                            ISO3 = "LAO",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = "LT",
                            CallingCode = "+370",
                            Enabled = false,
                            ISO3 = "LTU",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = "LV",
                            CallingCode = "+371",
                            Enabled = false,
                            ISO3 = "LVA",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = "MK",
                            CallingCode = "+389",
                            Enabled = false,
                            ISO3 = "MKD",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = "MN",
                            CallingCode = "+976",
                            Enabled = false,
                            ISO3 = "MNG",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = "BN",
                            CallingCode = "+673",
                            Enabled = false,
                            ISO3 = "BRN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = "MT",
                            CallingCode = "+356",
                            Enabled = false,
                            ISO3 = "MLT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = "MM",
                            CallingCode = "+95",
                            Enabled = false,
                            ISO3 = "MMR",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = "NO",
                            CallingCode = "+47",
                            Enabled = false,
                            ISO3 = "NOR",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = "NP",
                            CallingCode = "+977",
                            Enabled = false,
                            ISO3 = "NPL",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = "PK",
                            CallingCode = "+92",
                            Enabled = false,
                            ISO3 = "PAK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = "PL",
                            CallingCode = "+48",
                            Enabled = false,
                            ISO3 = "POL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = "AF",
                            CallingCode = "+93",
                            Enabled = false,
                            ISO3 = "AFG",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = "BR",
                            CallingCode = "+55",
                            Enabled = false,
                            ISO3 = "BRA",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = "PT",
                            CallingCode = "+351",
                            Enabled = false,
                            ISO3 = "PRT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = "MD",
                            CallingCode = "+373",
                            Enabled = false,
                            ISO3 = "MDA",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = "RO",
                            CallingCode = "+40",
                            Enabled = false,
                            ISO3 = "ROU",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = "RW",
                            CallingCode = "+250",
                            Enabled = false,
                            ISO3 = "RWA",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = "SE",
                            CallingCode = "+46",
                            Enabled = true,
                            ISO3 = "SWE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = "LK",
                            CallingCode = "+94",
                            Enabled = false,
                            ISO3 = "LKA",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = "SK",
                            CallingCode = "+421",
                            Enabled = false,
                            ISO3 = "SVK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = "SI",
                            CallingCode = "+386",
                            Enabled = false,
                            ISO3 = "SVN",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = "SO",
                            CallingCode = "+252",
                            Enabled = false,
                            ISO3 = "SOM",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = "AL",
                            CallingCode = "+355",
                            Enabled = false,
                            ISO3 = "ALB",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = "ME",
                            CallingCode = "+382",
                            Enabled = false,
                            ISO3 = "MNE",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = "RS",
                            CallingCode = "+381",
                            Enabled = false,
                            ISO3 = "SRB",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = "KE",
                            CallingCode = "+254",
                            Enabled = false,
                            ISO3 = "KEN",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = "TH",
                            CallingCode = "+66",
                            Enabled = false,
                            ISO3 = "THA",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = "ER",
                            CallingCode = "+291",
                            Enabled = false,
                            ISO3 = "ERI",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = "TM",
                            CallingCode = "+993",
                            Enabled = false,
                            ISO3 = "TKM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = "BW",
                            CallingCode = "+267",
                            Enabled = false,
                            ISO3 = "BWA",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = "TR",
                            CallingCode = "+90",
                            Enabled = false,
                            ISO3 = "TUR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = "UA",
                            CallingCode = "+380",
                            Enabled = false,
                            ISO3 = "UKR",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = "UZ",
                            CallingCode = "+998",
                            Enabled = false,
                            ISO3 = "UZB",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = "VN",
                            CallingCode = "+84",
                            Enabled = false,
                            ISO3 = "VNM",
                            Name = "Vietnam"
                        });
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeLimit")
                        .HasColumnType("int");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("varchar");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("varchar");

                    b.Property<int?>("MaxTicketsAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<DateTimeOffset>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.Property<string>("Website")
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EndDate");

                    b.HasIndex("ImageId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Visible");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.EventAffiliateCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAffiliateCodes");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.EventTicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("AvailableFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("AvailableUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("CustomVat")
                        .HasColumnType("decimal(4,4)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("LinkCode")
                        .HasColumnType("varchar(450)");

                    b.Property<int?>("MaxTicketsAvailable")
                        .HasColumnType("int");

                    b.Property<int>("MaxTicketsPerPurchase")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("PubliclyAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("ReservedTickets")
                        .HasColumnType("int");

                    b.Property<decimal?>("ServiceFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("TicketsCheckedIn")
                        .HasColumnType("int");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LinkCode")
                        .IsUnique()
                        .HasFilter("[LinkCode] IS NOT NULL");

                    b.ToTable("EventTicketTypes");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ImageDbModel", b =>
                {
                    b.Property<Guid>("StorageIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("PermaLink")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StorageIdentifier");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.MarketplaceListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerId")
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<Guid?>("FulfilledByOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ListingPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("ReservedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SellerId")
                        .HasColumnType("varchar(450)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("SoldAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FulfilledByOrderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TicketId");

                    b.ToTable("MarketplaceListings");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AffiliateCodeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<Guid?>("MarketplaceListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("PurchaserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("varchar");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(4,4)");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateCodeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MarketplaceListingId");

                    b.HasIndex("PurchaserId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CheckedIn")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OriginalOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OriginalOrderId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ApplicationUser", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Business", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Event", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany("Events")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ImageDbModel", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Business");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Currency");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.EventAffiliateCode", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.EventTicketType", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.MarketplaceListing", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Buyer")
                        .WithMany("MarketplacePurchases")
                        .HasForeignKey("BuyerId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Order", "FulfilledByOrder")
                        .WithMany()
                        .HasForeignKey("FulfilledByOrderId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Seller")
                        .WithMany("MarketplaceListings")
                        .HasForeignKey("SellerId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Currency");

                    b.Navigation("FulfilledByOrder");

                    b.Navigation("Seller");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Order", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.EventAffiliateCode", "AffiliateCode")
                        .WithMany("Orders")
                        .HasForeignKey("AffiliateCodeId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.MarketplaceListing", "MarketplaceListing")
                        .WithMany()
                        .HasForeignKey("MarketplaceListingId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Purchaser")
                        .WithMany()
                        .HasForeignKey("PurchaserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.EventTicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffiliateCode");

                    b.Navigation("Currency");

                    b.Navigation("MarketplaceListing");

                    b.Navigation("Purchaser");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Ticket", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Order", "OriginalOrder")
                        .WithMany("Tickets")
                        .HasForeignKey("OriginalOrderId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.EventTicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalOrder");

                    b.Navigation("Owner");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ApplicationUser", b =>
                {
                    b.Navigation("MarketplaceListings");

                    b.Navigation("MarketplacePurchases");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Business", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Event", b =>
                {
                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.EventAffiliateCode", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Order", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
