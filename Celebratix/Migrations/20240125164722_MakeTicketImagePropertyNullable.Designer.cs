// <auto-generated />
using System;
using Celebratix.Common.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Celebratix.Migrations
{
    [DbContext(typeof(CelebratixDbContext))]
    [Migration("20240125164722_MakeTicketImagePropertyNullable")]
    partial class MakeTicketImagePropertyNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Affiliate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.ToTable("Affiliates");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StripeConnectAccountId")
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<bool>("StripePayoutRequirementsFulfilled")
                        .HasColumnType("boolean");

                    b.Property<bool>("StripePayoutRequirementsSubmitted")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ApplicationFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventsPageUrl")
                        .HasColumnType("text");

                    b.Property<string>("FacebookPixelId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.BusinessPayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessPayouts");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("ColorMode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomBackground")
                        .HasColumnType("uuid");

                    b.Property<int?>("Layout")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Theme")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CustomBackground");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ChannelEvent", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<int>("EventsId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("ChannelId", "EventsId");

                    b.ToTable("ChannelEvents");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ChannelTickets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AddDescription")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ChannelEventId")
                        .HasColumnType("uuid");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string[]>("EventTicketIds")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<bool>("OpenByDefault")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ChannelTickets");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ChannelTicketsResale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelTicketsId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DescriptionFlag")
                        .HasColumnType("integer");

                    b.Property<string>("RedirectTo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChannelTicketsResale");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CallingCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ISO3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("integer");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MinMarketplaceListingPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<int?>("AgeLimit")
                        .HasColumnType("integer");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("character varying(5)");

                    b.Property<string>("CustomEmailTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("CustomSlug")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalEventUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<bool>("Publish")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TicketBackgroundColor")
                        .HasColumnType("text");

                    b.Property<Guid?>("TicketBackgroundImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("TicketTextColor")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomSlug")
                        .IsUnique();

                    b.HasIndex("EndDate");

                    b.HasIndex("ImageId");

                    b.HasIndex("StartDate");

                    b.HasIndex("TicketBackgroundImageId");

                    b.HasIndex("Visible");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.EventTicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ApplicationFeeOverwrite")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("AvailableFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("AvailableUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("HideSoldOut")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkCode")
                        .HasColumnType("text");

                    b.Property<int?>("MaxTicketsAvailable")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTicketsPerPurchase")
                        .HasColumnType("integer");

                    b.Property<int>("MinTicketsPerPurchase")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OnlyAffiliates")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("PubliclyAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("ReservedTickets")
                        .HasColumnType("integer");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketImageId")
                        .HasColumnType("uuid");

                    b.Property<int>("TicketsCheckedIn")
                        .HasColumnType("integer");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LinkCode");

                    b.HasIndex("TicketImageId");

                    b.ToTable("EventTicketTypes");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ImageDbModel", b =>
                {
                    b.Property<Guid>("StorageIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PermaLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StorageIdentifier");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.MarketplaceListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerId")
                        .HasColumnType("text");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("character varying(5)");

                    b.Property<Guid?>("FulfilledByOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ListingPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("ReservedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("SoldAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FulfilledByOrderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TicketId");

                    b.ToTable("MarketplaceListings");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AffiliateCodeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ApplicationAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("character varying(5)");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MarketplaceListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("PurchaserId")
                        .HasColumnType("text");

                    b.Property<decimal>("ServiceAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("text");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TicketTransferOfferId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(4,4)");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateCodeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EventId");

                    b.HasIndex("MarketplaceListingId");

                    b.HasIndex("PurchaserId");

                    b.HasIndex("TicketTransferOfferId")
                        .IsUnique();

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.PayoutAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("OwnerId");

                    b.ToTable("PayoutAccounts");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Originator")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActiveMarketplaceListingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActiveTicketTransferOfferId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CheckedIn")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LatestOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OriginalOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActiveMarketplaceListingId");

                    b.HasIndex("ActiveTicketTransferOfferId");

                    b.HasIndex("LatestOrderId");

                    b.HasIndex("OriginalOrderId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.TicketTransferOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("text");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransferorId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("TransferredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TransferorId");

                    b.ToTable("TicketTransferOffers");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Tracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AffiliateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ChannelId");

                    b.ToTable("Trackings");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TrackingId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EventId");

                    b.HasIndex("TrackingId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ChannelEvent", b =>
                {
                    b.Property<Guid>("ChannelsId")
                        .HasColumnType("uuid");

                    b.Property<int>("EventsId")
                        .HasColumnType("integer");

                    b.HasKey("ChannelsId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("ChannelEvent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderTicket", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketsId")
                        .HasColumnType("uuid");

                    b.HasKey("OrdersId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("OrderTicket");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Affiliate", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Channel", "Channel")
                        .WithMany("AffiliateCodes")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.Navigation("Channel");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ApplicationUser", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Business", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.BusinessPayout", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany("Payouts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Channel", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ImageDbModel", "Image")
                        .WithMany()
                        .HasForeignKey("CustomBackground");

                    b.Navigation("Business");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Event", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany("Events")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ImageDbModel", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ImageDbModel", "TicketBackgroundImage")
                        .WithMany()
                        .HasForeignKey("TicketBackgroundImageId");

                    b.Navigation("Business");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Currency");

                    b.Navigation("Image");

                    b.Navigation("TicketBackgroundImage");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.EventTicketType", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ImageDbModel", "Image")
                        .WithMany()
                        .HasForeignKey("TicketImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.MarketplaceListing", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Buyer")
                        .WithMany("MarketplacePurchases")
                        .HasForeignKey("BuyerId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Order", "FulfilledByOrder")
                        .WithMany()
                        .HasForeignKey("FulfilledByOrderId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Seller")
                        .WithMany("MarketplaceListings")
                        .HasForeignKey("SellerId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Currency");

                    b.Navigation("FulfilledByOrder");

                    b.Navigation("Seller");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Order", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Affiliate", "AffiliateCode")
                        .WithMany("Orders")
                        .HasForeignKey("AffiliateCodeId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.MarketplaceListing", "MarketplaceListing")
                        .WithMany()
                        .HasForeignKey("MarketplaceListingId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Purchaser")
                        .WithMany("Orders")
                        .HasForeignKey("PurchaserId");

                    b.HasOne("Celebratix.Common.Models.DbModels.TicketTransferOffer", "TicketTransferOffer")
                        .WithOne("FulfilledByOrder")
                        .HasForeignKey("Celebratix.Common.Models.DbModels.Order", "TicketTransferOfferId");

                    b.HasOne("Celebratix.Common.Models.DbModels.EventTicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AffiliateCode");

                    b.Navigation("Currency");

                    b.Navigation("Event");

                    b.Navigation("MarketplaceListing");

                    b.Navigation("Purchaser");

                    b.Navigation("TicketTransferOffer");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.PayoutAccount", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("Celebratix.Common.Models.DbModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Owner")
                        .WithMany("PayoutAccounts")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.RefreshToken", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Ticket", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.MarketplaceListing", "ActiveMarketplaceListing")
                        .WithMany()
                        .HasForeignKey("ActiveMarketplaceListingId");

                    b.HasOne("Celebratix.Common.Models.DbModels.TicketTransferOffer", "ActiveTicketTransferOffer")
                        .WithMany()
                        .HasForeignKey("ActiveTicketTransferOfferId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Order", "LatestOrder")
                        .WithMany("InverseTicketLatestOrder")
                        .HasForeignKey("LatestOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Order", "OriginalOrder")
                        .WithMany("OriginalTickets")
                        .HasForeignKey("OriginalOrderId");

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Celebratix.Common.Models.DbModels.EventTicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveMarketplaceListing");

                    b.Navigation("ActiveTicketTransferOffer");

                    b.Navigation("LatestOrder");

                    b.Navigation("OriginalOrder");

                    b.Navigation("Owner");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.TicketTransferOffer", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Receiver")
                        .WithMany("AcceptedTicketTransfers")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Celebratix.Common.Models.DbModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", "Transferor")
                        .WithMany("TicketTransferRequests")
                        .HasForeignKey("TransferorId");

                    b.Navigation("Receiver");

                    b.Navigation("Ticket");

                    b.Navigation("Transferor");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Tracking", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Affiliate", "Affiliate")
                        .WithMany()
                        .HasForeignKey("AffiliateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("Business");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Transaction", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Tracking", "Tracking")
                        .WithMany()
                        .HasForeignKey("TrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Channel");

                    b.Navigation("Event");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("ChannelEvent", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Channel", null)
                        .WithMany()
                        .HasForeignKey("ChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderTicket", b =>
                {
                    b.HasOne("Celebratix.Common.Models.DbModels.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebratix.Common.Models.DbModels.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Affiliate", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.ApplicationUser", b =>
                {
                    b.Navigation("AcceptedTicketTransfers");

                    b.Navigation("MarketplaceListings");

                    b.Navigation("MarketplacePurchases");

                    b.Navigation("Orders");

                    b.Navigation("PayoutAccounts");

                    b.Navigation("TicketTransferRequests");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Business", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Payouts");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Channel", b =>
                {
                    b.Navigation("AffiliateCodes");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Event", b =>
                {
                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.Order", b =>
                {
                    b.Navigation("InverseTicketLatestOrder");

                    b.Navigation("OriginalTickets");
                });

            modelBuilder.Entity("Celebratix.Common.Models.DbModels.TicketTransferOffer", b =>
                {
                    b.Navigation("FulfilledByOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
